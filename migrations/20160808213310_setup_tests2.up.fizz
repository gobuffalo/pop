create_table("songs", func(t) {
  t.Column("id", "uuid", {"primary":true})
  t.Column("u_id", "int", {"null":true})
  t.Column("title", "string", {})
  t.Column("composed_by_id", "int", {"null":true})
})

create_table("composers", func(t) {
  t.Column("name", "string", {})
})

create_table("writers", func(t) {
  t.Column("name", "string", {})
  t.Column("book_id", "int", {})
})

create_table("addresses", func(t) {
  t.Column("street", "string", {})
  t.Column("house_number", "int", {})
})

create_table("users_addresses", func(t) {
  t.Column("user_id", "int", {})
  t.Column("address_id", "int", {})
})

create_table("courses", func(t) {
	t.Column("id", "uuid", {"primary": true})
})

create_table("course_codes", func(t) {
	t.Column("id", "uuid", {"primary": true})
	t.Column("course_id", "uuid", {})
})

{{ if eq .Dialect "postgres" }}
create_table("cakes", func(t) {
  t.Column("int_slice", "int[]", {"null": true})
  t.Column("float_slice", "numeric[]", {"null": true})
  t.Column("string_slice", "varchar[]", {"null": true})
})
{{ end }}

add_column("books", "description", "string", {"default": ""})
change_column("books", "description", "string", {"default": "test", "size": 100})
add_index("books","description",{})
rename_index("books","books_description_idx","books_description_index")
